group 'ru.memoscope'
version '1.0-SNAPSHOT'
apply plugin: 'java'
apply plugin: 'com.google.protobuf'
apply plugin: 'application'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.7'
    }
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java', 'build/generated/source/proto/main/java',
                    'build/generated/source/proto/main/grpc'
        }
        proto {
            srcDir '../protos'
        }
    }
}

dependencies {
    compile 'com.google.protobuf:protobuf-java:3.6.+'
    compile "io.grpc:grpc-all:1.+"


    compile 'com.vk.api:sdk:0.5.12'
    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    compile group: 'org.asynchttpclient', name: 'async-http-client', version: '2.6.0'
    compile group: 'mysql', name: 'mysql-connector-java', version: '8.0.13'
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.6.+'
    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.+'
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}


mainClassName = 'ru.vkhack2018.Server'

startScripts.enabled = false

task server(type: CreateStartScripts) {
    mainClassName = 'ru.memoscope.server.Server'
    applicationName = 'server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}

task db(type: CreateStartScripts) {
    mainClassName = 'ru.memoscope.dataBase.DataBase'
    applicationName = 'dataBase'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}

task buffer(type: CreateStartScripts) {
    mainClassName = 'ru.memoscope.buffer.Buffer'
    applicationName = 'buffer'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = jar.outputs.files + project.configurations.runtime
}

applicationDistribution.into('bin') {
    from(server)
    from(db)
    from(buffer)
    fileMode = 0755
}